I"]F<blockquote>
  <p>당신의 안드로이드 앱 데이터는 안전한가요?</p>
</blockquote>

<h1 id="-데이터를-저장할-땐-반드시-암호화가-필요합니다">🔐 데이터를 저장할 땐 반드시 암호화가 필요합니다.</h1>

<p><img src="/assets/img/post/20210124_01.jpeg" alt="security" /></p>

<p><a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=1&amp;mode=view&amp;p_No=259&amp;b_No=259&amp;d_No=101&amp;ST=T&amp;SV=">KISA의 개인정보 안전성 확보조치 기준</a>에 따르면 <br />
주민번호나 비밀번호와 같은 개인 정보를 모바일 단말에 저장할 때는 반드시 모두 암호화 해야합니다.<br />
<br />
만약 보안에 민감한 서비스라서 모바일 보안 취약점 검사를 받는다면<br />
위에 서술된 민감한 정보 뿐 아니라 전화번호, 생년월일, 이름 등을 포함한<br />
사실상 거의 모든 정보를 암호화 해야합니다.<br /></p>

<p>따라서 단말에 저장하는 데이터는 <strong>전부 암호화</strong>하는 것이 정신건강에 이롭습니다.<br />
애초부터 암호화 하는 습관을 들이면 더더욱 좋구요 👍<br />
<br /></p>

<h1 id="️-encryptedsharedpreferences">👮‍♂️ EncryptedSharedPreferences</h1>

<p><img src="/assets/img/post/20210124_jetpack.png" alt="jetpack" /></p>

<p>Android Jetpack에 포함된 <a href="https://developer.android.com/reference/androidx/security/crypto/EncryptedSharedPreferences">EncryptedSharedPreferences</a>를 이용하면<br />
복잡한 구현 없이도 손쉽게 <strong>SharedPreferences 데이터를 암호화</strong>할 수 있습니다. <br />
<del>갓드로이드킹트팩</del><br />
<br />
비록 알파버전이나 사실상 구글 공식 라이브러리라서 안심하고 사용할 수 있고<br />
기존의 SharedPreferences를 상속받고 있어서 처음 호출하는 부분만 수정하면<br />
이후에 데이터를 읽고 쓰는 과정에서의 수정은 아예 없기 떄문에 무척 편리합니다.<br />
<br />
실제로 사용해보면 키값과 데이터가 모두 암호화 되는 것을 확인하실 수 있습니다.<br />
<br />
그럼 한번 직접 적용해볼까요?<br /></p>

<p><br /><br /></p>

<h2 id="1-buildgradleapp에-의존성-추가">1. build.gradle(app)에 의존성 추가</h2>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dependencies</span> <span class="o">{</span>
    <span class="n">implementation</span> <span class="s1">'androidx.security:security-crypto:1.0.0-alpha02'</span>
<span class="o">}</span>
</code></pre></div></div>

<p>app 수준의 <code class="language-plaintext highlighter-rouge">build.gradle</code> 의 dependencies에 추가해주면 됩니다.<br /></p>

<h2 id="2-코드상에서-encryptedsharedpreferences를-호출하기">2. 코드상에서 EncryptedSharedPreferences를 호출하기</h2>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">val</span> <span class="py">masterKeyAlias</span> <span class="p">=</span> <span class="nc">MasterKeys</span><span class="p">.</span><span class="nf">getOrCreate</span><span class="p">(</span><span class="nc">MasterKeys</span><span class="p">.</span><span class="nc">AES256_GCM_SPEC</span><span class="p">)</span>

  <span class="kd">val</span> <span class="py">sharedPreferences</span> <span class="p">=</span> <span class="nc">EncryptedSharedPreferences</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
      <span class="s">"secret_shared_prefs"</span><span class="p">,</span> <span class="c1">// 파일이름을 입력하세요</span>
      <span class="n">masterKeyAlias</span><span class="p">,</span>
      <span class="n">context</span><span class="p">,</span>
      <span class="nc">EncryptedSharedPreferences</span><span class="p">.</span><span class="nc">PrefKeyEncryptionScheme</span><span class="p">.</span><span class="nc">AES256_SIV</span><span class="p">,</span>
      <span class="nc">EncryptedSharedPreferences</span><span class="p">.</span><span class="nc">PrefValueEncryptionScheme</span><span class="p">.</span><span class="nc">AES256_GCM</span>
  <span class="p">)</span>

  <span class="kd">val</span> <span class="py">editor</span><span class="p">:</span> <span class="nc">SharedPreferences</span><span class="p">.</span><span class="nc">Editor</span> <span class="p">=</span> <span class="n">sharedPreferences</span><span class="p">.</span><span class="nf">edit</span><span class="p">()</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">EncryptedSharedPreferences</code>가 이미 SharedPreferences 이므로 이후에는 <br />
기존에 쉐어드프리퍼런스를 사용하던 곳에서 데이터를 읽고 쓰는 코드는 동일하므로<br />
별도의 코드 수정 없이 기존에 사용하시던 대로 사용하면 됩니다.<br /><br />
<br /></p>

<h1 id="-그런데-말입니다">🤔 그런데 말입니다</h1>

<p><code class="language-plaintext highlighter-rouge">EncryptedSharedPreferences</code>를 적용하고나서 저장한 모든 데이터는 암호화 되겠지만<br />
이미 평문으로 저장된 데이터를 암호화 해주지는 않습니다 😭<br /></p>

<p>그리고 안타깝게도 보통 이 글을 읽고 계신분이라면 <br />
이미 배포되어 사용자 단말에 저장된 데이터의 암호화가 필요하신 분들이 많으실 것 같습니다.<br />
<br />
이미 배포된 앱이라서 사용자가 데이터를 평문으로 저장하고 있다면<br />
이 <strong>저장된 데이터를 전부 암호화 하는 이관작업</strong>이 반드시 필요합니다.<br />
<br /><br />
여러가지 방법이 있을 수 있겠지만 이 글에서는 가장 간단한</p>

<ol>
  <li>기존 데이터를 삭제하고</li>
  <li>새로운 파일에 암호화 해서 복사</li>
</ol>

<p>하는 방법을 소개드리겠습니다.<br />
<br />
<br /></p>

<h2 id="-기존-데이터-이관하기">📨 기존 데이터 이관하기</h2>

<p>기존에 이미 사용하고 있는 데이터를 암호화 하는 문제는 또 별개의 문제입니다<br />
<br />
가장 간단한 방법은 기존의 데이터를 전부 암호화하여 복사하고 기존의 데이터를 삭제하여 <br />
무조건 암호화 된 데이터만 접근하도록 하는 방식입니다.<br />
<br /></p>

<blockquote>
  <p>⚠️ 복사하고 기존 데이터를 삭제하는 방식이므로 암호화 할 파일이름과 기존 파일이름은 달라야 합니다.</p>
</blockquote>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 암호화 되지 않은 레거시 데이터</span>
<span class="kd">val</span> <span class="py">legacy</span> <span class="p">=</span> <span class="nc">SharedPreferences</span> <span class="k">by</span> <span class="n">mContext</span><span class="p">.</span><span class="nf">getSharedPreferences</span><span class="p">(</span><span class="n">mFile</span><span class="p">,</span> <span class="nc">Context</span><span class="p">.</span><span class="nc">MODE_PRIVATE</span><span class="p">)</span>
<span class="kd">val</span> <span class="py">entries</span> <span class="p">=</span> <span class="n">legacy</span><span class="p">.</span><span class="n">all</span><span class="p">.</span><span class="n">entries</span>

<span class="c1">// 모든 데이터를 복사한다.</span>
<span class="c1">// editor는 EncryptedSharedPreferences의 editor </span>
<span class="n">entries</span><span class="p">.</span><span class="nf">forEach</span> <span class="p">{</span>
    <span class="k">when</span> <span class="p">(</span><span class="n">it</span><span class="p">.</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">is</span> <span class="nc">String</span> <span class="p">-&gt;</span> <span class="n">editor</span><span class="p">.</span><span class="nf">putString</span><span class="p">(</span><span class="n">it</span><span class="p">.</span><span class="n">key</span><span class="p">,</span> <span class="n">it</span><span class="p">.</span><span class="n">value</span> <span class="k">as</span> <span class="nc">String</span><span class="p">).</span><span class="nf">apply</span><span class="p">()</span>
        <span class="k">is</span> <span class="nc">Long</span> <span class="p">-&gt;</span> <span class="n">editor</span><span class="p">.</span><span class="nf">putLong</span><span class="p">(</span><span class="n">it</span><span class="p">.</span><span class="n">key</span><span class="p">,</span> <span class="n">it</span><span class="p">.</span><span class="n">value</span> <span class="k">as</span> <span class="nc">Long</span><span class="p">).</span><span class="nf">apply</span><span class="p">()</span>
        <span class="k">is</span> <span class="nc">Int</span> <span class="p">-&gt;</span> <span class="n">editor</span><span class="p">.</span><span class="nf">putInt</span><span class="p">(</span><span class="n">it</span><span class="p">.</span><span class="n">key</span><span class="p">,</span> <span class="n">it</span><span class="p">.</span><span class="n">value</span> <span class="k">as</span> <span class="nc">Int</span><span class="p">).</span><span class="nf">apply</span><span class="p">()</span>
        <span class="k">is</span> <span class="nc">Float</span> <span class="p">-&gt;</span> <span class="n">editor</span><span class="p">.</span><span class="nf">putFloat</span><span class="p">(</span><span class="n">it</span><span class="p">.</span><span class="n">key</span><span class="p">,</span> <span class="n">it</span><span class="p">.</span><span class="n">value</span> <span class="k">as</span> <span class="nc">Float</span><span class="p">).</span><span class="nf">apply</span><span class="p">()</span>
        <span class="k">is</span> <span class="nc">Boolean</span> <span class="p">-&gt;</span> <span class="n">editor</span><span class="p">.</span><span class="nf">putBoolean</span><span class="p">(</span><span class="n">it</span><span class="p">.</span><span class="n">key</span><span class="p">,</span> <span class="n">it</span><span class="p">.</span><span class="n">value</span> <span class="k">as</span> <span class="nc">Boolean</span><span class="p">).</span><span class="nf">apply</span><span class="p">()</span>
        <span class="k">is</span> <span class="nc">Set</span><span class="p">&lt;</span><span class="err">*</span><span class="p">&gt;</span> <span class="p">-&gt;</span> <span class="n">editor</span><span class="p">.</span><span class="nf">putStringSet</span><span class="p">(</span><span class="n">it</span><span class="p">.</span><span class="n">key</span><span class="p">,</span> <span class="n">it</span><span class="p">.</span><span class="n">value</span> <span class="k">as</span> <span class="nc">Set</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">&gt;).</span><span class="nf">apply</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>복사를 다했다면 기존의 평문 데이터를 전부 지워버립시다.<br /></p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">legacy</span><span class="p">.</span><span class="nf">edit</span><span class="p">().</span><span class="nf">clear</span><span class="p">().</span><span class="nf">apply</span><span class="p">()</span>
</code></pre></div></div>

<p><br /><br /><br /></p>

<h2 id="그런데-잠깐-최소지원이-api23-이라구요---">그런데 잠깐, 최소지원이 api23 이라구요? 😱 😱 😱</h2>

<p><img src="/assets/img/post/20210124_no.gif" alt="no_please_no" /></p>

<p>네 그렇습니다. <br />
마시멜로이하는 이 방법으로는 할 수 가 없기 때문에<br />
결국 새로운 암호화 모듈을 만들어서 구현해야 합니다.😱<br /><br /></p>

<p>문제는 아직까지도 많은 앱들의 23미만의 앱을 지원하고 있기 때문에<br />
기껏 EncryptedSharedPreferences가 있어도 활용하기가 어렵다는 점이 가장 큰 문제입니다.<br /><br /></p>

<h2 id="️-그럼-이제-어떡하죠">🤷‍♂️ 그럼 이제 어떡하죠?</h2>

<p>아직 방법이 있습니다. <br /></p>

<p><a href="https://github.com/HaenaraShin/BrickSharedPreference">BrickSharedPreferences</a>를 사용해보세요!<br /><br /></p>

<h1 id="bricksharedpreferences가-뭔데">BrickSharedPreferences가 뭔데?</h1>

<p><img src="/assets/img/post/20210124_brick.png" alt="BrickSharedPreferences" /></p>

<p><br /></p>

<h4 id="api-레벨-상관-없이-sharedpreferences를-암호화해주는-라이브러리-입니다">Api 레벨 상관 없이 SharedPreferences를 암호화해주는 라이브러리 입니다.</h4>

<p>minSdk 14로 낮은 레벨까지 지원하며<br />
23 이상이라면 제트팩의 EncryptedSharedPreferences를 사용하고<br />
23 미만이라면 커스텀 암호화 SharedPreferences를 이용하는 보안 라이브러리 입니다.<br /></p>

<p>또한 추가로 위에서 설명한 ‘기존 데이터 이관’을 <strong>단 한줄로 해결할 수 있습니다.</strong><br /><br /></p>

<h2 id="1-buildgradleapp에-의존성-추가-1">1. build.gradle(app)에 의존성 추가</h2>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">dependencies</span> <span class="p">{</span>
    <span class="n">implementation</span> <span class="err">'</span><span class="n">dev</span><span class="p">.</span><span class="n">haenara</span><span class="p">:</span><span class="n">bricksharedpref</span><span class="p">:</span><span class="mf">1.0.2</span><span class="err">'</span>
    <span class="n">implementation</span> <span class="err">'</span><span class="n">androidx</span><span class="p">.</span><span class="n">security</span><span class="p">:</span><span class="n">security-crypto</span><span class="p">:</span><span class="mf">1.0.0</span><span class="p">-</span><span class="n">alpha02</span><span class="err">'</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="2-코드상에서-bricksharedpreferences를-호출하기">2. 코드상에서 BrickSharedPreferences를 호출하기</h2>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 기존 SharedPreferences를 가져오는 방법에 "Brick"만 앞에 붙이면 된다. </span>
<span class="kd">val</span> <span class="py">mSharedPreferences</span> <span class="p">=</span> <span class="nf">getBrickSharedPreferences</span><span class="p">(</span><span class="n">fileName</span><span class="p">,</span> <span class="nc">Context</span><span class="p">.</span><span class="nc">MODE_PRIVATE</span><span class="p">)</span>
</code></pre></div></div>

<p>기존에 쉐어드프리퍼런스 호출 시에 코틀린에서 사용하던 코드와 거의 유사한데, <br />
<code class="language-plaintext highlighter-rouge">getSharedPreferences</code>를<br /> 
<code class="language-plaintext highlighter-rouge">getBrickSharedPreferences</code>로 고친 것이 전부입니다.<br /></p>

<p>BrickSharedPreferences도 기존에 쉐어드프리퍼런스를 사용하던 곳에서 데이터를 읽고 쓰는 코드는 동일하므로<br />
별도의 코드 수정 없이 기존에 사용하시던 대로 사용하면 됩니다.<br /><br />
<br /></p>

<h2 id="3-기존-데이터-이관하기">3. 기존 데이터 이관하기</h2>

<h4 id="단-한줄이면-됩니다">단 한줄이면 됩니다.</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 저장되어 있는 데이터를 전부 암호화</span>
<span class="n">mSharedPreferences</span><span class="p">.</span><span class="nf">migrateEncryptedSharedPreferences</span><span class="p">()</span>
</code></pre></div></div>

<p>요거 한줄이면 해결됩니다.</p>

<p><img src="/assets/img/post/20210124_ma1.jpg" alt="sample_run" />
<br />
<img src="/assets/img/post/20210124_ma2.jpg" alt="sample_run" />
<br />
<img src="/assets/img/post/20210124_ma3.jpeg" alt="sample_run" />
<br />
<img src="/assets/img/post/20210124_ma4.jpeg" alt="sample_run" /></p>

<p><br /></p>

<p>단, 만약 SharedPreferences를 여러 파일로 나누어 사용중이라면<br />
각각 파일별로 마이그레이션을 호출해줘야 합니다.<br /></p>

<p>이관 작업은 앱 실행 시 딱 한번만 호출해주면 되기 때문에 <br />
Application class의 onCreate() 에서 호출해주는 것이 가장 좋습니다.<br /></p>

<p><br /><br /></p>

<h2 id="4-실행-예제">4. 실행 예제</h2>

<p><img src="/assets/img/post/20210124_sample_run.gif" alt="sample_run" /></p>

<p><a href="https://github.com/HaenaraShin/BrickSharedPreference">BrickSharedPreferences 레포지토리</a>에 자세하게 설명되어 있으니 <br /></p>

<p>필요하시다면 샘플 앱과 코드를 참고해보시는 것도 좋을 것 같습니다👍<br /></p>

<p><br /><br /><br /></p>

<h1 id="-결론">🚀 결론</h1>

<p>모바일 단말에 저장하는 모든 데이터는 암호화 해야합니다.<br />
BrickSharedPreferences를 이용해서 간편하게 데이터를 암호화 해보세요.<br />
만약 유용하게 쓰셨다면 깃헙에서 <strong>⭐️스타</strong>를 눌러주세요 👍<br /></p>

<h1 id="레퍼런스">레퍼런스</h1>

<ul>
  <li><a href="https://developer.android.com/reference/kotlin/androidx/security/crypto/EncryptedSharedPreferences">EncryptedSharedPreferences - 구글 Android Developer</a></li>
  <li><a href="https://github.com/HaenaraShin/BrickSharedPreference">BrickSharedPreferences</a></li>
</ul>

<p><br /><br /></p>
:ET