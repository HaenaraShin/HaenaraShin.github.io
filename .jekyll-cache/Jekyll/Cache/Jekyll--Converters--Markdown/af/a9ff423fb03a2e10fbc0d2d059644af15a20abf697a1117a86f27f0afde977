I":+<blockquote>
  <p>TDD를 배우는 과정에서 어려웠던 점과 해결책을 공유합니다.</p>
</blockquote>

<h1 id="️-tdd가-뭔데">🤷‍♂️ TDD가 뭔데?</h1>

<p><img src="/assets/img/post/20201129_tdd.png" alt="TDD_Cycle" /></p>

<h2 id="테스트-주도-개발-test-driven-development">테스트 주도 개발 (TEST DRIVEN DEVELOPMENT)</h2>

<p>테스트 주도 개발이란 켄트 벡이 정의한 개발 프로세스로서</p>

<p><code class="language-plaintext highlighter-rouge">테스트 코드를 먼저 작성하고 해당 테스트를 통과하는 코드를 작성하는 과정을 짧고 빠르게 반복하는 SW 개발 프로세스</code></p>

<p>를 의미합니다.</p>

<h2 id="tdd의-3단계">TDD의 3단계</h2>

<ul>
  <li><span style="color:red">RED</span> -&gt; <span style="color:green">GREEN</span> -&gt; <span style="color:blue">REFACTORING</span> 3개의 사이클을 반복하며 각각의 스텝이 의미하는 바는 아래와 같습니다.</li>
</ul>

<h3 id="1-red--실패하는-테스트-코드를-작성">1. <span style="color:red">RED</span> : 실패하는 테스트 코드를 작성</h3>
<h3 id="2-green--테스트-코드를-어떻게든-성공하도록-수정">2. <span style="color:green">GREEN</span> : 테스트 코드를 어떻게든 성공하도록 수정</h3>

<h3 id="3-refactoring--테스트-성공하는-채로-리팩토링으로-개선">3 <span style="color:blue">REFACTORING</span> : 테스트 성공하는 채로 리팩토링으로 개선</h3>

<p><br /><br /></p>
<h1 id="-tdd의-장점">👍 TDD의 장점</h1>

<p>일반적으로 TDD를 통해 얻을 수 있는 것들은 아래와 같습니다.</p>

<ul>
  <li>😊 심리적 안정감과 자신감</li>
  <li>⚖️ 테스트 코드로 코드의 안정성</li>
  <li>🛠 리팩토링 하기 좋은 구조의 코드</li>
  <li>🎯 테스트 코드 작성 과정에서 요구사항 도출</li>
</ul>

<p>클린아키텍처 저자 엉클밥은 <code class="language-plaintext highlighter-rouge">TDD로 짜는게 그냥 짜는 것 보다 빠르다</code>는</p>

<p>그야말로 🛢고인물스러운 주장을 합니다… 😇</p>

<p><br /><br /></p>

<h1 id="-내가-tdd를-실패한-이유">😭 내가 TDD를 실패한 이유</h1>

<p><img src="/assets/img/post/20201129_sad.jpeg" alt="SAD" /></p>

<p>TDD가 뭔지 학습한 뒤 본격적으로 연습해보고자 자신있게 프로젝트를 생성했지만..</p>

<p>정작 코드를 작성하려고 하자 손이 탁 멈춰버렸고 한줄도 제대로 짜지 못했습니다. 😢</p>

<p>분명 단위테스트를 작성하는 것에는 익숙했지만 이상하게 TDD를 의식하자 코드가 나오질 않았습니다.</p>

<p><br /></p>

<h3 id="-왜-실패했을까">🤔 왜 실패했을까?</h3>

<p>이후에 다시 분석한 실패 요인은 3가지 였습니다.</p>

<ul>
  <li>너무 어려운 예제로 시작했다.</li>
  <li>요구사항을 정리하지 않았다.</li>
  <li><strong>순환 논리의 오류</strong>에 빠졌다.</li>
</ul>

<p><br /></p>

<h3 id="️-순환-논리의-오류">♻️ 순환 논리의 오류?</h3>

<p>테스트 코드를 막상 짜려고하자 내 머릿속에서 이런 의문들이 떠오르고 혼란에 빠지고 말았습니다.😱</p>

<blockquote>
  <p>구현 코드가 있어야 그에 대한 테스트 코드를 작성할 수 있는거 아닌가?</p>
</blockquote>

<blockquote>
  <p>구현코드 없이 테스트 코드를 어떻게 작성하지?</p>
</blockquote>

<blockquote>
  <p>그렇다고 구현 코드를 작성하고 테스트코드를 작성하면 TDD가 아니잖아?</p>
</blockquote>

<blockquote>
  <p>뭐 부터 시작하는게 맞는거야?</p>
</blockquote>

<p>단순히 <span style="color:red">RED</span> -&gt; <span style="color:green">GREEN</span> -&gt; <span style="color:blue">REFACTORING</span> 3개의 스텝만으로는 설명이 충분치 않았습니다.</p>

<p>스텝별로 좀 더 상세히 알아보도록 합시다.</p>

<p><br /><br /></p>

<h1 id="️-실전-tdd">💁‍♂️ 실전 TDD</h1>

<p><img src="/assets/img/post/20201129_start.jpeg" alt="실전" /></p>

<h2 id="1-readme에-요구사항을-한국어로-정리">1. README에 요구사항을 한국어로 정리</h2>

<p>문장으로 정리함으로써 요구사항을 구체화하고 도출해내는 과정입니다.</p>

<ul>
  <li>코드레벨에서 구현해야 할 요구사항을 한국어로 정리합니다.</li>
  <li>최대한 많이, 구체적으로 적습니다.</li>
  <li>클래스와 함수를 의식하지 말고 기능단위로 적습니다.</li>
  <li>이후 여기서 적은 기능 요구사항들을 그대로 테스트 코드로 작성합니다.</li>
</ul>

<p><br /></p>

<h2 id="2-컴파일-에러가-나는-테스트코드를-작성-">2. <span style="color:red">컴파일 에러가 나는 테스트코드를 작성 </span></h2>

<ul>
  <li>아직 작성하지 않은 클래스와 함수를 상상력으로 작성해나가며 테스트 코드를 작성합니다.</li>
  <li>결과적으로 이 단계에서는 <span style="color:red">컴파일 에러</span>가 나는 상태가 됩니다.</li>
  <li>필자는 그냥 pseudo code라고 받아들이니까 편하게 짤 수 있었습니다.</li>
</ul>

<p><br /></p>

<h2 id="3-누락된-코드를-구현">3. <span style="color:red">누락된 코드를 구현</span></h2>

<ul>
  <li>미구현 된 코드를 채워나가며 컴파일 에러<strong>만</strong> 해결합니다.
    <ul>
      <li>즉 실행 가능한 (그러나 실패하는) 테스트 코드로 수정합니다.</li>
    </ul>
  </li>
  <li>내부 로직을 구현할 필요 없이 테스트 실행이 가능하게만 짜면 됩니다.</li>
</ul>

<p><br /></p>

<h2 id="4-테스트-실행해서-fail을-확인">4. <span style="color:red">테스트 실행해서 Fail을 확인</span></h2>

<ul>
  <li>테스트를 실행하고 결과로 Fail 을 눈으로 확인합니다.</li>
  <li>이 과정을 생략하고 싶은 유혹이 자주 오지만 반드시 확인해야 합니다.
    <h3 id="-잠깐-왜-굳이-결과로-fail을-봐야해">✋ 잠깐! 왜 굳이 결과로 Fail을 봐야해?</h3>
  </li>
</ul>

<blockquote>
  <p>Unit 테스트는 디폴트가 성공이므로 테스트 코드에 버그가 있어서 <strong>실수로 성공</strong> 해버린다면
이후에 다음 스텝에서 테스트가 성공해도 정말로 로직을 잘 짠건지 검증이 불가능해지기 때문!</p>
</blockquote>

<p><br /></p>

<h2 id="5-테스트-결과를-어떻게든-success-로-만든다">5. <span style="color:green">테스트 결과를 어떻게든 Success 로 만든다.</span></h2>

<ul>
  <li>무슨 짓(죄악😈)을 해서라도 일단 테스트 결과가 <span style="color:green">Success</span>가 나게끔 만듭니다.</li>
  <li>결과적으로 테스트 코드가 잘 동작한다는 정도만 검증합니다.</li>
</ul>

<h4 id="-죄악이란">😈 죄악이란?</h4>

<ul>
  <li>코드 중복, 하드 코딩 등을 이용하여 그야말로 주어진 테스트만 <strong>간신히 성공</strong> 하게 만듭니다.</li>
  <li>실제 코드 로직을 구현하는 대신 입력과 출력의 형식 정도만 맞춥니다.</li>
</ul>

<p>예를 들면 아래와 같은 <code class="language-plaintext highlighter-rouge">sum()</code>이란 함수를 검증한다고 가정합니다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">assertEquals</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="nf">sum</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
</code></pre></div></div>

<p>이 경우에 죄악 예시는 <code class="language-plaintext highlighter-rouge">sum()</code>이 4를 반환하도록 하드코딩 하는 것입니다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">sum</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nc">Int</span><span class="p">):</span> <span class="nc">Int</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">4</span>
<span class="p">}</span> 
</code></pre></div></div>

<p>결과적으로 <code class="language-plaintext highlighter-rouge">assertEquals(4, sum(2, 2))</code> 테스트는 성공을 하게 됩니다.</p>

<p><br /></p>

<h2 id="6-코드를-리팩토링">6. <span style="color:blue">코드를 리팩토링</span></h2>

<ul>
  <li>테스트 결과를 Success 유지하는 채로 코드를 리팩토링합니다.</li>
  <li>전 단계에서 저지른 죄악(코드 중복, 하드 코딩 등)을 속죄하는 단계 👼</li>
  <li>이 단계부터는 실제 상용 코드를 구현 합니다.</li>
  <li>반복해서 테스트를 돌려가며 리팩토링 해나갑니다.</li>
  <li>필요에 따라서는 테스트 케이스를 추가하고 프로세스를 반복합니다.</li>
</ul>

<p><br /></p>

<h2 id="7-반복">7. 반복</h2>

<p>충분히 안심이 된다면 다음 로직을 2단계부터 반복합니다.</p>

<p><br /><br /></p>

<h1 id="-더-나은-tdd를-위한-tip">🚀 더 나은 TDD를 위한 Tip</h1>

<ul>
  <li>연습이 많이 필요합니다.</li>
  <li>테스트 짜기 쉬운 것 부터 시작해봅시다.</li>
  <li>메소드추출, 클래스 생성 등 IDE 기능을 최대한 활용합니다. (젯브레인 충성충성 ^^7)</li>
  <li><strong>⚠️모든 케이스를 반드시 검증 해야하는 것은 아닙니다.</strong>
    <ul>
      <li><strong>테스트 코드는 꼭 많은 것이 좋은 것은 아닙니다.</strong></li>
      <li>테스트 코드가 너무 많으면 오히려 리팩토링이 부담스러워 집니다.</li>
      <li>본인 스스로 리팩토링 할 때 안심될 수준을 권장합니다.</li>
      <li>Private 함수는 테스트 할 필요가 없습니다.</li>
    </ul>
  </li>
</ul>

<p><br /><br /></p>
<h1 id="-oop-vs-tdd-vs-refactoring-삼각관계">📐 OOP vs TDD vs Refactoring 삼각관계</h1>

<p>객체지향, TDD, 리팩토링은 모두 밀접한 연관관계를 갖게 됩니다.</p>

<p>프로젝트의 상황, 개발자의 역량과 숙련도에 따라 이 연관관계가 절망이 될 수도, 희망이 될 수도 있습니다.</p>

<h2 id="절망편">절망편</h2>

<p><img src="/assets/img/post/20201129_tri1.png" alt="절망편" /></p>

<h2 id="희망편">희망편</h2>

<p><img src="/assets/img/post/20201129_tri2.png" alt="희망편" /></p>

<p><br /><br /></p>

<h1 id="-결론">🦄 결론</h1>

<p>TDD는 많은 연습을 필요로 하지만 단계별로 차근차근 해본다면 어렵지 않을 거에요</p>

<p>여러분도 TDD를 통해서 안정적이고 리팩토링하기 좋은 코드를 해보시기 바랍니다. 😊</p>
:ET